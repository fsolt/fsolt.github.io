---
title: The SWIID Source Data
author: Frederick Solt
date: '2017-07-28'
categories:
  - note
  - r
  - swiid
slug: the-swiid-source-data
bibliography: /Users/fredsolt/Library/texmf/bibtex/bib/FSLibrary.bib
csl: /Users/fredsolt/Library/texmf/bibtex/csl/american-political-science-association2.csl
output:
    html_document:
        self_contained: true
description: "I have been producing the Standardized World Income Inequality Database for nearly a decade. Since 2008, the SWIID has provided estimates of the Gini index of income inequality..."
---

```{r, include=FALSE}
library(tidyverse)

swiid_source <- read_csv("https://github.com/fsolt/swiid/raw/8c5d972f19a68a4c432d75491f65dc5172901222/data/swiid_source.csv") # freeze this post at v8.0

```


_Saturday, 9 February 2019: Updated with information on the source data for SWIID Version 8.0_

I have been producing the Standardized World Income Inequality Database for nearly a decade. Since 2008, the SWIID has provided estimates of the Gini index of income inequality^[I think the clearest explanation of the Gini index is that it is half the average difference in income between all pairs of units---say, households---as a percentage of the mean income of those units.  Okay, I said "clearest," not necessarily "clear."  Anyway, it has a theoretical range of 0 (all households have the same income) to 100 (one household has all the income and the rest have none), but Ginis below 20 or above 60 are rare in the real world.  There are good reasons to prefer other measures of inequality, and there are many options, but the Gini is by far the most widely available.] for as many countries and years as possible and---given the primary goal of maximizing spatial and temporal coverage---these estimates are as comparable as the available data allow.  The dataset has been used widely by academics, journalists, and policymakers.  It's been successful way beyond all my hopes.^[At the time, those hopes were admittedly concerned mostly with getting [#Reviewer2](https://twitter.com/search?q=%23reviewer2&src=typd) off my back so I could publish a [series](/papers/solt2011) [of](/papers/solthabelgrant2011) [manuscripts](/papers/solt2012) I had on how the context of inequality is related to people's political attitudes.] I've been [adding to it, revising it, improving on it](/swiid/swiid_downloads/) pretty much the entire time since its launch.  Now, [with the support of the NSF](https://www.nsf.gov/awardsearch/showAward?AWD_ID=1533746), I am scrapping all of that work and starting fresh.  From scratch.  

This is the first in a series of posts on how I did it.  It focuses on an unheralded but foundational part of the SWIID project, the source data.  The basic idea behind the SWIID is to start with the data that has been most carefully picked over to ensure its utmost cross-national comparability: the data of the fantastic [Luxembourg Income Study](http://www.lisdatacenter.org).  I've heard that generating a single country-year of LIS data takes an average of ten person-months of work.  _That's_ dedication to comparability. `r emo::ji("heart")`  But the flipside of maximizing comparability is that the LIS's coverage is pretty sparse: at last count, it includes just `r swiid_source %>% filter(str_detect(series, "LIS.*disp sqrt")) %>% nrow()` country-years.^[Which is what #Reviewer2 always complained about.  R2: Shouldn't you include [Ruritania and Megalomania](https://en.wikipedia.org/wiki/Ruritania#In_academia) in your sample, given the broad applicability of your theory?  Me: Yes, sure, but like I wrote in the paper, there's no LIS data for those countries, and the other available data just isn't comparable. R2: Well then, I recommend rejection.  Me: Grr.]  To address this weakness, the SWIID routine estimates the relationships between Gini indices based on the LIS and all of the other Ginis available for the same country-years, then uses these relationships to estimate what the LIS Gini _would be_ in country-years not included in the LIS but available from other sources.^[If you're thinking, "hey, multiple imputation for missing data," cool, that's what I was thinking too.  If you're thinking of [poll aggregators and house effects](https://projects.fivethirtyeight.com/congress-generic-ballot-polls/), yep, it's very similar.  If you're thinking of inequality as a latent variable, with a number of indicators of varying discrimination, that also works.  If you're thinking you need to look at some cat gifs right about meow, [click here](https://giphy.com/search/cat).]  The critical first step to making this work is getting _a lot_ of other, non-LIS Ginis.  I call these other Ginis the SWIID's source data.  Over the years, I and my research assistants built up a big spreadsheet of data collected from international organizations, national statistical offices, and scholarly books and articles.  But it seemed like whenever I checked over these source data, I would find that at least a few figures had been recently revised, or their source was seemingly no longer available, or (worst of all) they evidently had been entered incorrectly.  So again: it's time to start over from scratch.

To be included in the SWIID's source data, observations need to encompass the entire population of a country without regard to age, location,^[The requirement for complete territorial coverage was relaxed for minor deviations such as data on Portugal that excludes Madeira and the Azores. It was relaxed somewhat further for early series that covered only the urban population of three highly urbanized countries: Uruguay, Argentina, and South Korea.  The general rule, however, is that data is excluded if it measures the income distribution of only urban or rural populations, or of only selected cities, or some other such incomplete territory.] or employment status.^[This last requirement is new; it means nearly 600 observations on the distribution of wages across employed individuals that were included in the source data of previous versions of the SWIID are now excluded.  Between the lack of information on those out of the workforce and on how workers formed households, these data weren't very strongly related to the LIS anyway.]  They need to have an identifiable welfare definition and equivalence scale (more on these below). Finally, because I want to be able to direct users to sources they can easily peruse themselves, observations need to be available online.^[For scholarly articles, I preferred DOIs or JSTOR stable URLs, but if those were unavailable I used the publisher website or another repository.  For books, I provide the link to the relevant page in Google Books. There were [two](https://books.google.com/books?id=zaL4CGdjOkUC) [books](https://books.google.com/books?id=_aapAgAAQBAJ) that I decided I had to include for which Google Books wouldn't show the relevant pages (at least not to me); in those two cases, the links I provide just go to the entire volume.  I confirmed that the cited pages can be found using Amazon's "Look Inside" feature, so I consider my "must be available online" rule only badly bent rather than completely broken.]

Hand-entering data is tedious and error-prone work, so I [automated as much of the process of data collection](https://github.com/fsolt/swiid/blob/master/R/data_setup.R) as practicable.  Most international organizations and a few national statistical offices use APIs that facilitate downloading their data, and often the [#rstats](https://twitter.com/search?q=%23rstats) community has built R packages using these APIs to make the task even easier.  I took as much advantage of these resources as possible.^[Although the sources with APIs were relatively few, they contained the most data: nearly half of the observations were collected this way.]  In the absence of an API, I scripted downloads of any available spreadsheets, preferring clean csv files to excel-formatted ones.  If there was no spreadsheet, but data were available in pdf files, I automated downloading these files and then used [Thomas Leeper](http://thomasleeper.com)'s [`tabulizer` package](https://github.com/ropensci/tabulizer) to read the tables into R.  In the absence of a file to download, I scripted the process of scraping the data from the web.  Still, for a variety of reasons, a source's data may have been consigned to being entered in a [separate spreadsheet](https://github.com/fsolt/swiid/raw/master/data-raw/fs_added_data.csv).  Many sources contain just a handful or fewer observations, making the payoff to the often laborious process of data cleaning too small to justify the effort. Some sources--including most academic articles--are behind paywalls, making reproducibility a hassle anyway (though I still often used tabulizer to read the data from the pdf before cutting-and-pasting it into the spreadsheet). Finally, at least [one source](https://wdronline.worldbank.org/bitstream/handle/10986/9269/wps4007.pdf?sequence=1
) contains crucial information encoded in the typeface(!!) of its tables, information lost when the tables are scanned into R.  All of the entries in this spreadsheet were checked repeatedly for errors,^[Which, of course, is not to say that they are error-free.  If you spot any problems, or better still, know of sources I might have missed, _please_ [let me know](https://github.com/fsolt/swiid/issues/6)!] and I excluded repeated reports of the exact same observation from different sources.  In the end, I was able to automate the collection of more than three quarters of the source data and a much higher percentage of the series that will be updated or are subject to revision, facilitating incorporating these changes in future versions.

The resulting dataset comprises `r nrow(swiid_source)`(!) Gini coefficients from `r swiid_source %>% count(country, year) %>% nrow()` country-years in `r swiid_source %>% count(country) %>% nrow()` countries or territories, making the coverage of the SWIID source data broader than that of any other income inequality dataset.  This isn't surprising given that, with the exceptions of the [WIID](https://www.wider.unu.edu/database/world-income-inequality-database-wiid4) (which, since it provides no original data, isn't drawn on at all anymore) and the [All the Ginis](https://www.gc.cuny.edu/Page-Elements/Academics-Research-Centers-Initiatives/Centers-and-Institutes/Stone-Center-on-Socio-Economic-Inequality/Core-Faculty,-Team,-and-Affiliated-LIS-Scholars/Branko-Milanovic/Datasets) database (which provides little original data, and so isn't drawn on much), the SWIID source data incorporates all of the data in these other datasets.  

```{r data_by_coverage, echo=FALSE}
atg_cy <- haven::read_dta(here::here("../swiid/data-raw/atg.dta")) %>% 
    select(country, year, starts_with("gini")) %>% 
    mutate(has_gini = rowMeans(select(., starts_with("gini")), na.rm = TRUE)) %>% 
    filter(has_gini > 0) %>% 
    count(country, year) %>% 
    nrow()

wider_cy <- readxl::read_excel(here::here("../swiid/dev/WIID_19Dec2018.xlsx")) %>% 
    filter(areacovr == "All" & popcovr == "All" & areacovr == "All" &
               !is.na(gini_reported) &
               !is.na(resource) &
               !is.na(scale) &
               !(resource == "Earnings")) %>% 
    select(country, year, gini_reported, source, resource, scale, everything()) %>% 
    count(country, year) %>% 
    nrow()

ss_cy <- swiid_source %>%
    count(country, year) %>%
    nrow()

datasets <- c("Eurostat", "OECD", "SEDLAC", "LISSY", "CEPALStat", "World Bank Povcalnet")

cy_coverage <- swiid_source %>% 
    count(source1, country, year) %>%
    count(source1, name = "n_cy") %>% 
    filter(source1 %in% datasets) %>% 
    mutate(source1 = recode(source1, LISSY = "LIS", "World Bank Povcalnet" = "Povcalnet")) %>% 
    bind_rows(tibble(source1 = c("WIID", "All the Ginis", "SWIID Source"),
                     n_cy = c(wider_cy, atg_cy, ss_cy))) %>% 
    arrange(desc(n_cy))

ggplot(cy_coverage, aes(forcats::fct_reorder(source1, n_cy, .desc = TRUE), n_cy)) +
    geom_bar(stat="identity") +
    theme_bw() +
    theme(axis.title.x = element_blank()) +  
    ylab("Country-Years") +
    ggtitle("Income Inequality Datasets by Country-Years Covered")
```

So, let's check out what the source data look like.  There is much more data available about the income distribution in some countries than in others.  Which countries are most data-rich?  The plot below shows the top dozen countries by the count of observations.  Canada, by virtue of the excellent [Statistics Canada](http://www.statcan.gc.ca) as well as longstanding membership in the OECD and LIS, has `r nrow(swiid_source %>% filter(country=="Canada"))` observations, many more than any other country.  The United Kingdom, Germany, and the United States are next, followed by an interesting mix of countries from around the world with not surprisingly a sizable European representation. All are members of the LIS.  On the other hand, eleven countries have only a single observation.

```{r obs_by_country, echo=FALSE}
swiid_source %>%
    mutate(country = if_else(stringr::str_detect(country, "United"),
                             stringr::str_replace(country, "((.).*) ((.).*)", "\\2.\\4."),
                             country)) %>% 
    count(country) %>%
    arrange(desc(n)) %>% 
    head(12) %>% 
    ggplot(aes(forcats::fct_reorder(country, n, .desc = TRUE), n)) +
    geom_bar(stat = "identity") +
    theme_bw() +
    theme(axis.title.x = element_blank() ) +
  #        axis.text.x  = element_text(angle=90, vjust=.45)) +  
    ylab("Observations") +
    ggtitle("Observations by Country in the SWIID Source Data")

```

As we'll see in later posts in this series, observations for the same country in the same year, but with different welfare definitions and equivalence scales or from different sources, are important to generating the SWIID's cross-nationally comparable estimates.  Still, we might be interested to know which countries have the most coverage of the years in the SWIID's current `r max(swiid_source$year)-1960`-year timeframe, from 1960 to `r max(swiid_source$year)`, because the SWIID's inequality estimates for countries with fewer country-year observations will include more interpolated values, which in turn will have more uncertainty.  

```{r years_by_country, echo=FALSE}
swiid_source %>%
    mutate(country = if_else(stringr::str_detect(country, "United"),
                             stringr::str_replace(country, "((.).*) ((.).*)", "\\2.\\4."),
                             country)) %>% 
    count(country, year) %>%
    count(country) %>% 
    arrange(desc(n)) %>% 
    head(12) %>% 
    ggplot(aes(forcats::fct_reorder(country, n, .desc = TRUE), n)) +
    geom_bar(stat = "identity") +
    theme_bw() +
    theme(axis.title.x = element_blank() ) +
  #        axis.text.x  = element_text(angle=90, vjust=.45)) +  
    ylab("Observations") +
    ggtitle("Years Covered by Country in the SWIID Source Data")

```

The source data includes observations for Sweden and the United Kingdom in all but one of these years and for the United States in all but five.  Iran and Argentina---two countries not included in the LIS---make the top 12, with 43 and 42 country-year observations respectively.  The median country has observations in `r swiid_source %>% count(country) %>% pull(n) %>% median()` different country-years.

We can also get a sense of the available inequality data by turning the question around and asking about coverage across countries over time.  There are observations for `r swiid_source %>% filter(year==2005) %>% count(country) %>% nrow()` countries in 2005.  Coverage is relatively good in the years from 2000 to `r swiid_source %>% count(country, year) %>% count(year) %>% filter(year > 2000 & n > 80) %>% pull(year) %>% max()`, at least 80 countries per year, before dropping to `r swiid_source %>% filter(year==(max(swiid_source$year)-1)) %>% count(country) %>% nrow()` countries for `r max(swiid_source$year)-1` and just `r swiid_source %>% filter(year==max(year)) %>% count(country) %>% nrow()` for `r max(swiid_source$year)`.  Country coverage is pretty thin each year through the 1960s and 1970s and still isn't all that great until the late 1980s.^[This is partly a result of my decision to insist on sources that are available online, but it's just as well: so little information is available about many of the so-excluded observations on that era that I find it hard to have much confidence in them.]

```{r countries_by_year, echo=FALSE}
swiid_source %>%
    count(country, year) %>%
    count(year) %>% 
    ggplot(aes(year, n)) +
    geom_line() +
    theme_bw() +
    expand_limits(x = c(1960, 2020)) +
    theme(axis.title.x = element_blank()) +
    ylab("Observations") +
    ggtitle("Countries Covered by Year in the SWIID Source Data")

```

Earlier I mentioned that to be included in the SWIID source data observations need to have an identifiable welfare definition and equivalence scale.  A welfare definition is an answer to the question, this Gini measures the distribution of what? The four welfare definitions employed in the SWIID source data are market income, gross income, disposable income, and consumption.  Market income is defined as the amount of money coming into the household, excluding any government cash or near-cash benefits, the so-called 'pre-tax, pre-transfer income.'^[It's important, though, to not think of the distribution of market income as 'pre-government.' Beyond taxes and transfers, governments seeking to shape the distribution of income have a wide array of 'market-conditioning' or 'predistribution' policy options, with minimum wage regulation and labor policy two obvious examples [see, e.g., @Morgan2013]. Further, even taxes and transfers can profoundly shape the distribution of _market_ income through 'second-order effects.' Where robust public pension programs exist, for example, people save less for retirement, leaving many of the elderly without market income in old age and so raising the level of market-income inequality [see, e.g., @Jesuit2010].]  Gross income is the sum of market income and government transfer payments; it is 'pre-tax, post-transfer income.'  Disposable income, in turn, is gross income minus direct taxes: 'post-tax, post-transfer income.'^[Note that disposable income still does not take into account, on the one hand, indirect taxes like sales taxes and VAT, or, on the other, public services and indirect government transfers such as price subsidies.  There is very little information available about the distribution of such 'final income,' pretty much only that generated by the [Commitment to Equity Institute](http://www.commitmentoequity.org), so I exclude it from the SWIID source data at least for the time being.]  Consumption does not refer to the money coming into the household at all but rather to the money going out.^[In previous versions of the SWIID, market and gross income were treated as a single welfare definition, and I am glad to finally be able to split them apart [c.f., @Solt2016, 1272].  The consumption welfare definition _might_ now be the most heterogeneous within the SWIID source data, varying considerably in whether and how observations treat expenditures on durable goods.  Another source of differences within a single welfare definition is the extent to which nonmonetary income---such as the value of food grown for the household's own consumption or of housing that the owner occupies---is included.  The SWIID source data include the variable `monetary` that indicates whether any nonmonetary income is taken into account, but at present this information is not incorporated into the classification of welfare definitions.]  In the source data, Ginis of disposable income are much more common than those using other welfare definitions.

```{r obs_by_wd, echo=FALSE}
swiid_source %>%
    mutate(wd = as.factor(recode(welfare_def, 
                       disp = "Disposable \nIncome", 
                       market = "Market \nIncome", 
                       gross = "Gross \nIncome",
                       con = "Consumption"))) %>% 
    count(wd) %>% 
    ggplot(aes(forcats::fct_reorder(wd, n, .desc = TRUE), n)) +
    geom_bar(stat = "identity") +
    theme_bw() +
    theme(axis.title.x = element_blank()) +  
    ylab("Observations") +
    ggtitle("Observations by Welfare Definition in the SWIID Source Data")

```

Equivalence scales are the ways in which the size and composition of a household is incorporated into the calculation of its members' welfare.  On the one hand, these factors can simply be ignored, with all households with the same amount of income or consumption treated as if they enjoy the same level of welfare, regardless of their size.  One can improve on this household 'scale'^[Scare quotes because, strictly speaking, nothing is being scaled at all; it's simply treating the household as the unit of analysis.] by dividing the household's income by its number of members, that is, by using a per capita scale.  But a household of two members and an income of \$100,000 is better off than one with a single member and \$50,000 due to economies of scale---that's a big reason why people look for roommates.  There are a variety of ways to try to account for these economies by calculating the number of "equivalent adults" in the household.  Of the most commonly used adult-equivalent scales, the square-root scale is the most straightforward: one simply divides the household income by the square root of the number of members.  The "OECD-modified" scale for the number of adult equivalents ([which the OECD itself actually never used](http://www.oecd.org/eco/growth/OECD-Note-EquivalenceScales.pdf)) counts the first adult as 1, all other adults as .5, and each child as .3.  And there are plenty of other adult-equivalent scales, from the "old OECD" scale (1 for the first adult, 0.7 for each additional adult, and 0.5 for each child) to caloric-requirement-based scales (which are actually very nearly per capita, as it turns out) to a number of country-specific scales.  In previous versions of the SWIID, all adult-equivalent scales were considered a single category.  Now, the square-root scale and the OECD-modified scale have both been split out, leaving the remaining catch-all adult-equivalent category much smaller.
    
```{r obs_by_es, echo=FALSE}
swiid_source %>%
    mutate(es = as.factor(recode(equiv_scale, 
                       hh = "Household", 
                       pc = "Per Capita", 
                       sqrt = "Square Root",
                       oecdm = "OECD Modified",
                       ae = "Other Adult\nEquivalent"))) %>% 
    count(es) %>% 
    ggplot(aes(forcats::fct_reorder(es, n, .desc = TRUE), n)) +
    geom_bar(stat = "identity") +
    theme_bw() +
    theme(axis.title.x = element_blank()) +  
    ylab("Observations") +
    ggtitle("Observations by Equivalence Scale in the SWIID Source Data")

```

Differences in the welfare definition and the equivalence scale employed constitute the biggest source of incomparability across observations in the source data, and all twenty of the possible combinations are represented.  I'll take up how we get from these incomparable observations to the SWIID estimates in the next post.  In the meantime, if you'd like to see the source data, you can [download it from here](https://github.com/fsolt/swiid/blob/master/data/swiid_source.csv).

```{r obs_by_wdes, echo=FALSE}
swiid_source %>%
    mutate(wd = as.factor(recode(welfare_def, 
                       disp = "Disposable", 
                       market = "Market", 
                       gross = "Gross",
                       con = "Consumption")),
           es = as.factor(recode(equiv_scale, 
                       hh = "None", 
                       pc = "Capita", 
                       sqrt = "Root",
                       oecdm = "OECDm",
                       ae = "Other")),
           wd_es = paste(wd, es, sep="/")) %>% 
    count(wd_es) %>% 
    ggplot(aes(forcats::fct_reorder(wd_es, n, .desc = TRUE), n)) +
    geom_bar(stat = "identity") +
    theme_bw() +
    theme(axis.title.x = element_blank(),
          axis.text.x  = element_text(angle=90, vjust=.45)) +  
    ylab("Observations") +
    ggtitle("Observations by Welfare Definition and Equivalence Scale in the SWIID Source Data")

```


```{r, include=FALSE}
api <- c("LISSY", "CEPAL", "OECD", "Eurostat", "Beegle et al. 2016", "Statistics Canada", "Statistics Denmark", "Statistics Finland", "Statistics Norway", "Statistics Sweden")
sheet <- c("SEDLAC", "Transmonee 2012", "Personal communication, K. Beegle, 2016-08-01", "Australian Bureau of Statistics", "Instituto Naciónal de Estadística de Bolivia", "Belarus National Committee of Statistics", "DANE Colombia", "Instituto Naciónal de Estadística y Censos Costa Rica", "CAPMAS Egypt", "Statistics Estonia", "Statistics Georgia", "Statistics Hong Kong 2017", "Statistics Indonesia", "Istat", "Kazakhstan Committee on Statistics", "Statistics Korea", "National Bureau of Statistics of Moldova", "National Statistical Committee of Kyrgyzstan", "Statistical Office of Montenegro", "Statistics New Zealand 1999", "Philippines Statistical Agency", "Russian Federal State Statistics Service", "Singapore Department of Statistics", "Slovenia Statistics Office", "Slovenia Statistics Office 2005", "Instituto Nacional de Estadística Spain", "Taiwan Directorate General of Budget, Accounting, and Statistics", "Turkish Statistical Institute", "UK Office for National Statistics", "Institute for Fiscal Studies", "U.S. Congressional Budget Office", "U.S. Census Bureau", "Instituto Nacional de Estadística Venezuela", "Milanovic 2016", "Milanovic 2016; Brandolini 1998", "Ackah, Bussolo, De Hoyos, and Medvedev 2008")
pdf <- c("National Statistical Service of Armenia", "Belarus National Committee of Statistics", "Statistics Hong Kong 2012", "Statistics Hong Kong 2007", "Dirección General de Estadística, Encuestas y Censos 2016", "Statistics Sri Lanka 2015", "Instituto Nacional de Estadistica Uruguay", "General Statistics Office of Vietnam 2013", "General Statistics Office of Vietnam", "PovcalNet; Chen and Ravallion 2008")
scrape <- c("Insee France", "Statistical Center of Iran", "CSO Ireland", "National Statistical Office of Thailand")

length(api) <- length(sheet)
length(pdf) <- length(sheet)
length(scrape) <- length(sheet)

mode <- tibble(api, sheet, pdf, scrape) %>% 
    gather(key = mode, value = source1) %>% 
    filter(!is.na(source1))

swiid_source <- read_csv("https://raw.githubusercontent.com/fsolt/swiid/master/data/swiid_source.csv", 
                         col_types = "cdddcclcccc") %>% 
    left_join(mode, by = "source1") %>% 
    mutate(mode = if_else(is.na(mode), "hand", mode))

table(swiid_source$mode)
```


# References

