{
  "hash": "562744ed3076ad3737f40248dd5f961c",
  "result": {
    "markdown": "---\ntitle: \"How to Switch Your Workflow from Stata to R, One Bit at a Time\"\nauthor: \"Frederick Solt\"\nslug: switch-to-r\ndate: '2018-08-15'\ncategories:\n  - note\n  - r\nbibliography: /Users/fredsolt/Library/texmf/bibtex/bib/FSLibrary.bib\ncsl: /Users/fredsolt/Library/texmf/bibtex/csl/american-political-science-association2.csl\nnocite: |\n    @Bryan2018, @Ismay2018, @Chang2015, @Kastellec2007, @Wickham2017\noutput:\n    html_document:\n        self_contained: true\n---\n\nA [recent exchange on Twitter](https://twitter.com/RyanDEnos/status/1029443132084105221) reminded me of my switch to R from Stata. I'd started grad school in 1999, before R hit 1.0.0, so I'd been trained exclusively in Stata. By 2008, I had way more than the proverbial 10,000 in-seat hours in Stata, and I knew all the tricks to make it do just what I wanted. I was even Stata Corp.'s on-campus rep at my university. Still, I'd started dabbling in R. Then as now, there were specific things R could do that Stata couldn't.[^1] But how to get those advantages without throwing out my hard-earned skills and starting over as a complete n00b? The answer was: a little bit at a time.\n\n[^1]: Then, for me, it was multiple imputation, parallel computation, [and the dot-and-whisker plots of regression coefficients introduced to political science by Kastellec and Lioni (2007)](https://www.princeton.edu/~jkastell/tables2graphs.html). On this last one, see also [the dotwhisker package](https://cran.r-project.org/web/packages/dotwhisker/vignettes/kl2007_examples.html). Now my list is different, but even longer. That's not what I want to get into in this post, though. This post is how, not why.\n\nFortunately, it's not difficult to switch back and forth within a given project, so you can start bringing some R to your Stata-based workflow while leaving it mostly intact. Then, if and when you find yourself doing more in R than in Stata, you can flip and start using Stata from within R.\n\nSo, [install R](https://cloud.r-project.org) and let's get you started.\n\n## Running R from Stata\n\nThe trick to running R from within your do-file is first to save the data you want to pass to R, then call the `.R` file with the commands you want to run in R (the \"R script\"), then---if necessary---reload the R output into Stata.\n\nWhile it's also possible to use Stata's `shell` command to run an R script (for illustrative purposes, let's pretend it's called `my_script.R`), [Roger Newson](https://www.imperial.ac.uk/people/r.newson)'s `rsource` module makes it particularly easy. Install it as follows:\n\n::: {.cell}\n\n```{.stata .cell-code}\n ssc install rsource, replace\n```\n:::\n\nUnfortunately, the information `rsource` needs about your R installation is a bit different depending on your OS, but once installed, adding this platform-independent code to your do-file will run the script:\n\n::: {.cell}\n\n```{.stata .cell-code}\nif \"`c(os)'\"==\"MacOSX\" | \"`c(os)'\"==\"UNIX\" {\n\trsource using my_script.R, rpath(\"/usr/local/bin/R\") roptions(`\"--vanilla\"')\n}\nelse {  // windows\n\trsource using my_script.R, rpath(`\"c:\\r\\R-3.5.1\\bin\\Rterm.exe\"') roptions(`\"--vanilla\"')  // change version number, if necessary\n}\n```\n:::\n\nOf course, you could choose to skip the whole if-else and just include the line that runs on *your* machine, but that's not doing any favors to your collaborators or anyone else trying to reproduce your results. You might also just prefer to specify the `rpath` and `roptions` in your profile do-file,[^2] but again, then you'll need to let others know to do the same or they won't be able to run your do-file.\n\n[^2]: See the technical note to [the help file for rsource](http://fmwww.bc.edu/RePEc/bocode/r/rsource.html) for details.\n\nNote, too, that if you don't have much R code to run, it might be easiest to just keep it in your do-file rather than using a separate script. You can do this using the `terminator` option to `rsource`, though a downside to this approach is that it doesn't allow you to if-else the `rsource` command by your OS. In the do-file below, I also use the `regsave` module to save my results to pass them to R; install it using `ssc install regsave, replace`.\n\n::: {.cell}\n\n```{.stata .cell-code}\nclear\nset more off\n\nsysuse auto, clear\ngen wt = weight/1000\nregress mpg wt displacement foreign trunk headroom length\nregsave using \"~/Desktop/R_Stata/auto_results.dta\", replace\n\nrsource, terminator(END_OF_R) rpath(\"/usr/local/bin/R\") roptions(`\"--vanilla\"')\n// rsource using my_script.R, rpath(`\"c:\\r\\R-3.5.1\\bin\\Rterm.exe\"') roptions(`\"--vanilla\"')  // use this line instead if you run a windows box\n\nlibrary(tidyverse);     # collection of all-around useful R packages\nlibrary(haven);         # for importing Stata datasets\nlibrary(dotwhisker);    # easy and beautiful regression plots, imho\n\nauto_results <- read_dta(\"~/Desktop/R_Stata/auto_results.dta\") %>% \n    rename(term = var,\n    estimate = coef,\n    std.error = stderr) %>% \n    filter(term != \"_cons\");\ndwplot(auto_results);\nggsave(\"~/Desktop/R_Stata/auto_results.png\", width = 5, height = 4);\n\nEND_OF_R\n\n```\n:::\n\n![](images/auto_results.png){fig-align=\"center\"}\n\n## Running Stata from R\n\nSo maybe you've gotten to the point where you spend more of your time in R than in Stata, but there's still a few parts of your work that you just want (or need!) to keep in Stata. Running a do-file (`my_do_file.do`) from inside your R script is easy with [Luca Braglia](https://github.com/lbraglia)'s `RStata` package:\n\n::: {.cell}\n\n```{.r .cell-code}\nif (!require(RStata)) install.packages(\"RStata\"); library(RStata) # this will install RStata if not already installed\n\nstata(\"my_do_file.do\", \n      stata.path = \"/Applications/Stata/StataMP.app/Contents/MacOS/stata-mp\", # yours probably differs: use the chooseStataBin() command on windows or linux machines; on Macs, right click on the Stata app, select \"Show Package Contents\", then see what's in the Contents/MacOS/ directory\n      stata.version = 13)  # again, specify what _you_ have\n```\n:::\n\nOn this side as well, it's possible to set the arguments just once, in your `.Rprofile` file. In my case, these two lines do the trick:\n\n::: {.cell}\n\n```{.r .cell-code}\n    options(\"RStata.StataPath\" = \"/Applications/Stata/StataMP.app/Contents/MacOS/stata-mp\")\n    options(\"RStata.StataVersion\" = 13)\n```\n:::\n\nSince Stata isn't free and open-source, it's even more likely that others will have different setups anyway, so this may make the most sense. Be sure to comment your code to clue people in, though.\n\nIf you just want to use a single Stata command `RStata::stata`[^3] will do that for you, too, with no need for a do-file. From the [RStata package documentation](https://www.rdocumentation.org/packages/RStata/versions/1.1.1):\n\n[^3]: In the argot (heh), this means the `stata` command in the `RStata` package.\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(\"RStata\")\n# remember to set RStata.StataPath & RStata.StataVersion in your .Rprofile first!  See https://www.rdocumentation.org/packages/RStata/\n\n## Data input to Stata\nx <- data.frame(a = rnorm(3), b = letters[1:3])\nstata(\"sum a\", data.in = x)                         \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n. sum a\n\n    Variable |        Obs        Mean    Std. Dev.       Min        Max\n-------------+---------------------------------------------------------\n           a |          3   -.1888825    .8789378  -1.164719   .5405706\n```\n:::\n\n```{.r .cell-code}\n## Data output from Stata (e.g., obtain 'auto' dataset)\nauto <- stata(\"sysuse auto\", data.out = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n. sysuse auto\n(1978 Automobile Data)\n```\n:::\n\n```{.r .cell-code}\nhead(auto)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n           make price mpg rep78 headroom trunk weight length turn displacement\n1   AMC Concord  4099  22     3      2.5    11   2930    186   40          121\n2     AMC Pacer  4749  17     3      3.0    11   3350    173   40          258\n3    AMC Spirit  3799  22    NA      3.0    12   2640    168   35          121\n4 Buick Century  4816  20     3      4.5    16   3250    196   40          196\n5 Buick Electra  7827  15     4      4.0    20   4080    222   43          350\n6 Buick LeSabre  5788  18     3      4.0    21   3670    218   43          231\n  gear_ratio  foreign\n1       3.58 Domestic\n2       2.53 Domestic\n3       3.08 Domestic\n4       2.93 Domestic\n5       2.41 Domestic\n6       2.73 Domestic\n```\n:::\n\n```{.r .cell-code}\n## Data input/output\n(y <- stata(\"replace a = 2\", data.in = x, data.out = TRUE))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n. replace a = 2\n(3 real changes made)\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n  a b\n1 2 a\n2 2 b\n3 2 c\n```\n:::\n:::\n\nAnd you can embed several Stata commands in your R code as well:\n\n::: {.cell}\n\n```{.r .cell-code}\ndata <- data.frame(y = rnorm(100), x1 = rnorm(100), x2 = rnorm(100))\nstata(\"\n    sum y x1 x2\n    reg y x1 x2\n    \", data.in = data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n. \n.     sum y x1 x2\n\n    Variable |        Obs        Mean    Std. Dev.       Min        Max\n-------------+---------------------------------------------------------\n           y |        100    .0236265     1.03123  -3.268936    2.58725\n          x1 |        100   -.1016676    1.002768  -2.997756   2.139994\n          x2 |        100    .0404716     .934101  -4.258553   2.231875\n.     reg y x1 x2\n\n      Source |       SS           df       MS      Number of obs   =       100\n-------------+----------------------------------   F(2, 97)        =      2.01\n       Model |  4.19911148         2  2.09955574   Prob > F        =    0.1389\n    Residual |  101.080895        97  1.04207108   R-squared       =    0.0399\n-------------+----------------------------------   Adj R-squared   =    0.0201\n       Total |  105.280006        99   1.0634344   Root MSE        =    1.0208\n\n------------------------------------------------------------------------------\n           y |      Coef.   Std. Err.      t    P>|t|     [95% Conf. Interval]\n-------------+----------------------------------------------------------------\n          x1 |  -.1795877   .1023142    -1.76   0.082    -.3826531    .0234778\n          x2 |  -.1060174   .1098355    -0.97   0.337    -.3240104    .1119756\n       _cons |   .0096589    .102709     0.09   0.925      -.19419    .2135078\n------------------------------------------------------------------------------\n.     \n```\n:::\n:::\n\n## Summing Up\n\nMoving parts of your work from Stata to R is totally feasible. Lots of people (for example, in the thread that touched this post off, [Steve Rodgers](https://twitter.com/SteveRogersinfo/status/1029444547930148866)) really want to take advantage of the superior graphics capabilities of R, especially the `ggplot` ecosystem, even while sticking to Stata for most of their work. Once your feet are wet, you may then decide R's many other benefits (the free part, the super-helpful community, the transferable job skills you can teach your students, the free part, the cutting-edge stuff available years before it's in Stata, the way [RStudio](https://www.rstudio.com) makes it dead easy to do reproducible research through [dynamic documents](https://rmarkdown.rstudio.com) and [version control](http://happygitwithr.com), and, once again, the free part) make switching over all the way to be worth the additional marginal effort. Or you may not.\n\nI completed the transition in three or four years, at my own pace: when I felt comfortable moving another chunk of my workflow over to R, I did, but not before. If I were doing it over right now, with [the tidyverse packages](https://www.tidyverse.org) dramatically reducing the slope of the learning curve, I might move faster, but there's no rush, really. Do what works for you.\n\n## Additional Notes\n\n-   [This post by John Ricco](https://web.archive.org/web/20171026174224/http://johnricco.github.io/2016/06/14/stata-dplyr/) describing how to translate Stata data cleaning commands to the `dplyr` idiom will likely be helpful to those new to tidyverse-style R and wanting to move quickly.\n-   [Matthieu Gomez's R for Stata Users](http://www.matthieugomez.com/statar/) is a more detailed phrasebook that will also be useful to new switchers (H/T [Arthur Yip](https://twitter.com/arthurhcyip)).[^4]\n-   I also ran across the [Rcall package](http://www.haghish.com/resources/pdf/Haghish_Rcall.pdf) while writing this up, but I haven't tried it. You may find it useful.\n-   OTOH, [these 2010 slides by Oscar Torres-Reyna](https://dss.princeton.edu/training/RStata.pdf) were definitely useful to me back in the day, but as they pre-date both the tidyverse and RStudio---the wonders of which really cannot be overstated---they're now more likely to cause you unnecessary confusion than help you if you're a new switcher. Better to steer clear.\n-   Great complete treatments on how to do stuff in R:\n    -   [Modern Dive](https://moderndive.com), by Chester Ismay and Albert Y. Kim\n    -   [R for Data Science](http://r4ds.had.co.nz), by Hadley Wickham and Garrett Grolemund\n    -   A bit older, but I still love Winston Chang's [Cookbook for R](http://www.cookbook-r.com) as a reference, especially the [Graphs chapter](http://www.cookbook-r.com/Graphs/)\n-   [RStudio's Cheat Sheets](https://www.rstudio.com/resources/cheatsheets/) are also great references.\n-   When you're ready to take the step to using R more than Stata, you'll want to get fully set up on [RStudio](https://www.rstudio.com/products/rstudio/download/), which provides a front end for running R and can integrate with git and GitHub for version control (you will want this). The best resource that I've found for this process is [Jenny Bryan's Happy Git and GitHub for the UseR](http://happygitwithr.com).\n-   The R community on [StackOverflow](https://stackoverflow.com) is full of helpful people. As your Google-fu develops, you'll find that links to StackOverflow are most likely to get you where you need to go.\n-   There are *so many* fantastic [#rstats](https://twitter.com/search?q=%23rstats) (dozens? hundreds?) follows on Twitter. With apologies to the---seriously---hundreds of others who've taught me tons of stuff over the years, I'm going to grit my teeth and rec just five to get you started: [Mara Averick](https://twitter.com/dataandme), [Jenny Bryan](https://twitter.com/JennyBryan), [David Robinson](https://twitter.com/drob), [Julia Silge](https://twitter.com/juliasilge), and [Hadley Wickham](https://twitter.com/hadleywickham).\n\n[^4]: Arthur also recommends vikjam's [Mostly Harmless Replication](https://github.com/vikjam/mostly-harmless-replication), which replicates most of the figures and tables of [Mostly Harmless Econometrics](http://www.mostlyharmlesseconometrics.com/) in both Stata and R (and many in Python and Julia as well). Though not intended as a guide for switchers, the site will be helpful to fans of the book looking for ways to implement its advice in R.\n\n## References",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": null
  }
}